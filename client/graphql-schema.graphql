# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  viewer: Viewer

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type TimeSheetDay {
  # The ID of an object
  id: ID!
  dayNum: Int!
  monthNum: Int!
  yearNum: Int!
  hours: Int!
  minutes: Int!
}

type TimeSheetNote {
  # The ID of an object
  id: ID!
  author: User!
  text: String!
}

type TimeSheetWeek {
  year: Int!
  weekNumber: Int!
  days: [TimeSheetDay!]!
  approvedBy: [User!]!
  notes: [TimeSheetNote!]!
}

type User {
  # The ID of an object
  id: ID!
  name: String!
  email: String!
  weekTimeSheet(year: Int!, week: Int!): TimeSheetWeek
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type Viewer {
  users(after: String, first: Int, before: String, last: Int): UserConnection
}
